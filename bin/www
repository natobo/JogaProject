#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const mongoose = require('mongoose');
const app = require('../app');
const { config } = require('../config/config');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const nPort = parseInt(val, 10);

  if (Number.isNaN(nPort)) {
    // named pipe
    return val;
  }

  if (nPort >= 0) {
    // port number
    return nPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  if (config.dev) console.log(`Listening http://localhost:${config.port}`);
  else console.log(`Listening on ${bind}`);
}

/**
 * Consts to make db connection, encodeURIComponent Encodes a text string as a valid component of a Uniform Resource Identifier
 * this way we ensure no problems with special characters
 */
const USER = encodeURIComponent(config.dbUser);
const PASSWORD = encodeURIComponent(config.dbPassword);
const DB_NAME = config.dbName;
// Our MongoDB URI
const MONGO_URI = `mongodb+srv://${USER}:${PASSWORD}@${config.dbHost}/${DB_NAME}?retryWrites=true&w=majority`;
// Do the DB Connection
mongoose
  .connect(MONGO_URI)
  .then(() => {
    console.log('DB connection succesful');
  })
  .catch((err) => {
    console.log(`ERROR connecting to the DBðŸ’¥: ${err}`);
  });

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.port || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
